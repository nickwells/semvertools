package main

/*
This code was generated by mkparamfilefunc
with parameters:


DO NOT EDIT
*/

import (
	"path/filepath"

	"github.com/nickwells/filecheck.mod/filecheck"
	"github.com/nickwells/param.mod/v3/param"
	"github.com/nickwells/xdg.mod/xdg"
)

// SetConfigFile
// will add a config file to the set which the param
// parser will process before checking the command line
// parameters. This function is one of a pair which will
// define the global and personal config files. It is
// generally best practice to add the global config file
// before adding the personal one. This is so that any
// system-wide defaults can be overriden by personal
// choice. This order also allows any parameters which
// can only be set once to be set in the global config
// file.
func SetConfigFile(ps *param.PSet) error {
	baseDir := xdg.ConfigHome()

	ps.AddConfigFileStrict(
		filepath.Join(baseDir,
			"github.com",
			"nickwells",
			"semvertools",
			"semverincr",
			"common.cfg"),
		filecheck.Optional)
	return nil
}

// SetGlobalConfigFile
// will add a config file to the set which the param
// parser will process before checking the command line
// parameters. This function is one of a pair which will
// define the global and personal config files. It is
// generally best practice to add the global config file
// before adding the personal one. This is so that any
// system-wide defaults can be overriden by personal
// choice. This order also allows any parameters which
// can only be set once to be set in the global config
// file.
func SetGlobalConfigFile(ps *param.PSet) error {
	dirs := xdg.ConfigDirs()
	if len(dirs) == 0 {
		return nil
	}
	baseDir := dirs[0]

	ps.AddConfigFileStrict(
		filepath.Join(baseDir,
			"github.com",
			"nickwells",
			"semvertools",
			"semverincr",
			"common.cfg"),
		filecheck.Optional)
	return nil
}

